// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc2
// source: muses.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MyHello_SayHello_FullMethodName = "/pb.MyHello/sayHello"
)

// MyHelloClient is the client API for MyHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyHelloClient interface {
	SayHello(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type myHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewMyHelloClient(cc grpc.ClientConnInterface) MyHelloClient {
	return &myHelloClient{cc}
}

func (c *myHelloClient) SayHello(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Person)
	err := c.cc.Invoke(ctx, MyHello_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyHelloServer is the server API for MyHello service.
// All implementations must embed UnimplementedMyHelloServer
// for forward compatibility.
type MyHelloServer interface {
	SayHello(context.Context, *Person) (*Person, error)
	mustEmbedUnimplementedMyHelloServer()
}

// UnimplementedMyHelloServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyHelloServer struct{}

func (UnimplementedMyHelloServer) SayHello(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedMyHelloServer) mustEmbedUnimplementedMyHelloServer() {}
func (UnimplementedMyHelloServer) testEmbeddedByValue()                 {}

// UnsafeMyHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyHelloServer will
// result in compilation errors.
type UnsafeMyHelloServer interface {
	mustEmbedUnimplementedMyHelloServer()
}

func RegisterMyHelloServer(s grpc.ServiceRegistrar, srv MyHelloServer) {
	// If the following call pancis, it indicates UnimplementedMyHelloServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MyHello_ServiceDesc, srv)
}

func _MyHello_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyHelloServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyHello_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyHelloServer).SayHello(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

// MyHello_ServiceDesc is the grpc.ServiceDesc for MyHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MyHello",
	HandlerType: (*MyHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sayHello",
			Handler:    _MyHello_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "muses.proto",
}

const (
	FileStoreService_QueryVisitUrl_FullMethodName = "/pb.FileStoreService/queryVisitUrl"
)

// FileStoreServiceClient is the client API for FileStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileStoreServiceClient interface {
	QueryVisitUrl(ctx context.Context, in *QueryFileInfoReq, opts ...grpc.CallOption) (*QueryFileInfoRsp, error)
}

type fileStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileStoreServiceClient(cc grpc.ClientConnInterface) FileStoreServiceClient {
	return &fileStoreServiceClient{cc}
}

func (c *fileStoreServiceClient) QueryVisitUrl(ctx context.Context, in *QueryFileInfoReq, opts ...grpc.CallOption) (*QueryFileInfoRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFileInfoRsp)
	err := c.cc.Invoke(ctx, FileStoreService_QueryVisitUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileStoreServiceServer is the server API for FileStoreService service.
// All implementations must embed UnimplementedFileStoreServiceServer
// for forward compatibility.
type FileStoreServiceServer interface {
	QueryVisitUrl(context.Context, *QueryFileInfoReq) (*QueryFileInfoRsp, error)
	mustEmbedUnimplementedFileStoreServiceServer()
}

// UnimplementedFileStoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileStoreServiceServer struct{}

func (UnimplementedFileStoreServiceServer) QueryVisitUrl(context.Context, *QueryFileInfoReq) (*QueryFileInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVisitUrl not implemented")
}
func (UnimplementedFileStoreServiceServer) mustEmbedUnimplementedFileStoreServiceServer() {}
func (UnimplementedFileStoreServiceServer) testEmbeddedByValue()                          {}

// UnsafeFileStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileStoreServiceServer will
// result in compilation errors.
type UnsafeFileStoreServiceServer interface {
	mustEmbedUnimplementedFileStoreServiceServer()
}

func RegisterFileStoreServiceServer(s grpc.ServiceRegistrar, srv FileStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileStoreService_ServiceDesc, srv)
}

func _FileStoreService_QueryVisitUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFileInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileStoreServiceServer).QueryVisitUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileStoreService_QueryVisitUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileStoreServiceServer).QueryVisitUrl(ctx, req.(*QueryFileInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileStoreService_ServiceDesc is the grpc.ServiceDesc for FileStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileStoreService",
	HandlerType: (*FileStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryVisitUrl",
			Handler:    _FileStoreService_QueryVisitUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "muses.proto",
}
